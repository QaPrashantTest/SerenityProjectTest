name: Serenity Tests with RCA
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-rca:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache RCA State (Flaky Detection)
        id: cache-rca
        uses: actions/cache@v3
        with:
          path: .rca-cache
          key: rca-cache-v2-flaky-${{ github.ref }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            rca-cache-v2-flaky-${{ github.ref }}-
            rca-cache-v2-flaky-

      - name: Run Serenity Tests
        run: mvn clean verify -Dsurefire.rerunFailingTestsCount=1
        env:
          serenity.take.screenshots: FOR_EACH_ACTION
          serenity.logging: QUIET

      - name: Generate Serenity Aggregate Report
        run: mvn serenity:aggregate

      - name: Generate RCA Report (HTML + Optional PDF)
        id: rca-report
        run: |
          set -euo pipefail
          mkdir -p rca-report/screenshots

          # Install jq if missing
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update -qq && sudo apt-get install -y -qq jq > /dev/null
          fi

          # Configuration
          RCA_HTML="rca-report/index.html"
          SCREENSHOT_DIR="rca-report/screenshots"
          CACHE_DIR=".rca-cache"
          mkdir -p "$CACHE_DIR"
          CURRENT_FAILS="$CACHE_DIR/current-fails.txt"
          PREVIOUS_FAILS="$CACHE_DIR/previous-fails.txt"
          > "$CURRENT_FAILS"

          TOTAL_TESTS=0
          FAILED_TESTS=0
          FLAKY_COUNT=0
          CONSISTENT_COUNT=0

          # HTML Header
          cat > "$RCA_HTML" << 'HTML_HEADER'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>RCA Report â€“ Failed Test Cases</title>
  <style>
    body { font-family: 'Segoe UI', sans-serif; margin: 20px; background: #f4f6f9; line-height: 1.5; }
    h1 { color: #d32f2f; border-bottom: 2px solid #eee; padding-bottom: 10px; }
    .summary { background: white; padding: 15px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 20px; }
    .test { border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 8px; background: white; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .test h3 { margin-top: 0; color: #c62828; }
    .meta { font-size: 0.9em; color: #555; margin-bottom: 8px; }
    .screenshot { margin: 10px 0; }
    .screenshot img { max-width: 80%; border: 1px solid #ccc; border-radius: 4px; }
    pre { background: #f0f0f0; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 0.9em; }
    .no-failures { color: #2e7d32; font-style: italic; font-size: 1.1em; }
    .tag { display: inline-block; padding: 2px 6px; margin-right: 5px; font-size: 0.8em; border-radius: 4px; }
    .tag-flaky { background: #fff3e0; color: #ef6c00; }
    .tag-consistent { background: #ffcdd2; color: #c62828; }
    .tag-new { background: #e3f2fd; color: #0277bd; }
    .metrics { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px; }
    .metric { padding: 5px 10px; background: #e0e0e0; border-radius: 4px; }
  </style>
</head>
<body>
  <h1>Root Cause Analysis (RCA) Report</h1>
  <p>
    <strong>Run:</strong> <a href="\${GITHUB_SERVER_URL}/\${GITHUB_REPOSITORY}/actions/runs/\${GITHUB_RUN_ID}">\${GITHUB_RUN_NUMBER}</a> |
    <strong>Commit:</strong> \${GITHUB_SHA::7} |
    <strong>Date:</strong> \$(date '+%Y-%m-%d %H:%M UTC')
  </p>
  <div class="summary">
    <strong>Test Summary</strong>
    <div class="metrics">
      <span class="metric">Total: <span id="total">0</span></span>
      <span class="metric">Passed: <span id="passed">0</span></span>
      <span class="metric">Failed: <span id="failed">0</span></span>
      <span class="metric">Flaky: <span id="flaky">0</span></span>
      <span class="metric">Consistent: <span id="consistent">0</span></span>
    </div>
  </div>
HTML_HEADER

          # Process JSON reports
          json_files=(target/site/serenity/*.json)
          if [[ ${#json_files[@]} -eq 1 && ! -f "${json_files[0]}" ]]; then
            echo "No test reports found."
            json_files=()
          fi

          for json in "${json_files[@]}"; do
            [[ ! -f "$json" ]] && continue
            result=$(jq -r '.result // empty' "$json")
            [[ -z "$result" ]] && continue

            ((TOTAL_TESTS++))
            if [[ "$result" == "fail" ]]; then
              ((FAILED_TESTS++))
              test_name=$(jq -r '.name // "Unknown"' "$json")
              story_name=$(jq -r '.story.name // "No Story"' "$json")
              class_name=$(basename "$json" .json)
              error_msg=$(jq -r '.error.message // "No message"' "$json" | sed 's/"/&quot;/g; s/\\n/<br>/g')

              echo "$class_name" >> "$CURRENT_FAILS"

              IS_FLAKY="false"
              IS_CONSISTENT="false"
              IS_NEW="false"

              if [[ -f "$PREVIOUS_FAILS" ]]; then
                if grep -q "^$class_name$" "$PREVIOUS_FAILS"; then
                  IS_CONSISTENT="true"
                  ((CONSISTENT_COUNT++))
                else
                  IS_FLAKY="true"
                  ((FLAKY_COUNT++))
                fi
              else
                IS_NEW="true"
              fi

              cat >> "$RCA_HTML" << HTML_BLOCK
    <div class="test">
      <h3>$test_name</h3>
      <p class="meta">
        <strong>Story:</strong> $story_name
HTML_BLOCK

              if [[ "$IS_CONSISTENT" == "true" ]]; then
                echo '        | <span class="tag tag-consistent">Consistent Failure</span>' >> "$RCA_HTML"
              elif [[ "$IS_FLAKY" == "true" ]]; then
                echo '        | <span class="tag tag-flaky">Flaky</span>' >> "$RCA_HTML"
              elif [[ "$IS_NEW" == "true" ]]; then
                echo '        | <span class="tag tag-new">New Failure</span>' >> "$RCA_HTML"
              fi

              cat >> "$RCA_HTML" << HTML_BLOCK
      </p>
      <p><strong>Error:</strong> $error_msg</p>
HTML_BLOCK

              screenshots=($(find target/site/serenity -maxdepth 1 -name "${class_name}_*.png" 2>/dev/null))
              if [[ ${#screenshots[@]} -gt 0 ]]; then
                echo "        <p><strong>Screenshots:</strong></p>" >> "$RCA_HTML"
                for img in "${screenshots[@]}"; do
                  filename=$(basename "$img")
                  cp "$img" "$SCREENSHOT_DIR/$filename"
                  echo "        <div class='screenshot'>" >> "$RCA_HTML"
                  echo "          <a href='screenshots/$filename' target='_blank'>$filename</a>" >> "$RCA_HTML"
                  echo "          <br><img src='screenshots/$filename' alt='Screenshot' />" >> "$RCA_HTML"
                  echo "        </div>" >> "$RCA_HTML"
                done
              fi

              echo "    </div>" >> "$RCA_HTML"
            fi
          done

          PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS))

          sed -i "s|id=\"total\">0|id=\"total\">$TOTAL_TESTS|g;
                  s|id=\"passed\">0|id=\"passed\">$PASSED_TESTS|g;
                  s|id=\"failed\">0|id=\"failed\">$FAILED_TESTS|g;
                  s|id=\"flaky\">0|id=\"flaky\">$FLAKY_COUNT|g;
                  s|id=\"consistent\">0|id=\"consistent\">$CONSISTENT_COUNT|g" "$RCA_HTML"

          # Add flaky/consistent summaries
          if [[ "$FLAKY_COUNT" -gt 0 ]]; then
            cat >> "$RCA_HTML" << HTML_BLOCK
    <div class="test" style="background:#fff8e1; border-left: 4px solid #ffa000;">
      <h3>Flaky Tests ($FLAKY_COUNT)</h3>
      <p>These tests passed in the previous run but failed now.</p>
      <ul>
        <li>Timing issues or race conditions</li>
        <li>Insufficient waits between actions</li>
        <li>Shared test data/state</li>
      </ul>
      <p><strong>Action:</strong> Investigate stability.</p>
    </div>
HTML_BLOCK
          fi

          if [[ "$CONSISTENT_COUNT" -gt 0 ]]; then
            cat >> "$RCA_HTML" << HTML_BLOCK
    <div class="test" style="background:#ffebee; border-left: 4px solid #c62828;">
      <h3>Consistently Failing ($CONSISTENT_COUNT)</h3>
      <p>These tests have failed repeatedly.</p>
      <ul>
        <li>Regression in app</li>
        <li>Flawed test logic</li>
        <li>Missing preconditions</li>
      </ul>
      <p><strong>Action:</strong> Prioritize fixing.</p>
    </div>
HTML_BLOCK
          fi

          if [[ "$FAILED_TESTS" -gt 0 && ! -f "$PREVIOUS_FAILS" ]]; then
            cat >> "$RCA_HTML" << HTML_BLOCK
    <div class="test" style="background:#e3f2fd; border-left: 4px solid #0277bd;">
      <h3>New Failures ($FAILED_TESTS)</h3>
      <p>First-time failures detected.</p>
      <ul>
        <li>Recent code changes</li>
        <li>Environment issues</li>
        <li>Data problems</li>
      </ul>
      <p><strong>Action:</strong> Check recent commits.</p>
    </div>
HTML_BLOCK
          fi

          if [[ "$FAILED_TESTS" -eq 0 ]]; then
            cat >> "$RCA_HTML" << HTML_BLOCK
    <div class="test" style="background:#e8f5e9; border-left: 4px solid #2e7d32;">
      <h3>All Tests Passed</h3>
      <p>Congratulations! All $TOTAL_TESTS tests passed.</p>
      <p>Full report: <a href="serenity-report/index.html" target="_blank">View Details</a></p>
    </div>
HTML_BLOCK
          fi

          # Footer
          cat >> "$RCA_HTML" << HTML_FOOTER
    <div style="margin-top:30px; color:#777; font-size:0.9em; border-top: 1px solid #eee; padding-top: 15px;">
      <p>
        Generated by GitHub Actions |
        <a href="\${GITHUB_SERVER_URL}/\${GITHUB_REPOSITORY}/actions/runs/\${GITHUB_RUN_ID}">View Build</a> |
        Commit: \${GITHUB_SHA}
      </p>
      <p>
        <a href="https://github.com/serenity-bdd/serenity-core">Serenity BDD</a> â€¢
        <a href="https://docs.github.com/actions">GitHub Actions</a>
      </p>
    </div>
  </body>
</html>
HTML_FOOTER

          echo "HTML report generated: $RCA_HTML"

          # Output metrics
          echo "total-tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failed-tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "passed-tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "flaky-count=$FLAKY_COUNT" >> $GITHUB_OUTPUT
          echo "consistent-count=$CONSISTENT_COUNT" >> $GITHUB_OUTPUT

          # Generate PDF if needed
          if [[ "$FAILED_TESTS" -gt 0 ]]; then
            echo "Generating PDF..."

            # Install Node.js
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - > /dev/null
            sudo apt-get install -y -qq nodejs > /dev/null

            # Install Puppeteer
            npm init -qy > /dev/null
            npm install puppeteer@21.0.3 --no-fund --no-audit --progress=false > /dev/null

            # Generate PDF
            cat > generate-pdf.mjs << 'EOF'
import puppeteer from 'puppeteer';
await (async () => {
  const browser = await puppeteer.launch({
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--single-process'
    ],
    headless: 'new'
  });
  const page = await browser.newPage();
  await page.goto('file://' + process.cwd() + '/rca-report/index.html', {
    waitUntil: 'networkidle0',
    timeout: 60000
  });
  await page.pdf({
    path: 'rca-report/rca-report.pdf',
    format: 'A4',
    printBackground: true,
    margin: {
      top: '20mm',
      right: '15mm',
      bottom: '20mm',
      left: '15mm'
    }
  });
  await browser.close();
})();
